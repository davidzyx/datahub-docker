FROM nvidia/cuda:8.0-cudnn6-devel-ubuntu16.04

MAINTAINER Adam Tilghman <acms-consult@ucsd.edu>

ENV TERM linux
ENV DEBIAN_FRONTEND noninteractive

#############################################
# From https://github.com/conda/conda-docker/blob/master/miniconda2/debian/Dockerfile
# Install miniconda first

ENV PATH /opt/conda/bin:$PATH
ENV CONDA_DIR /opt/conda
RUN mkdir -m 0755 /opt/conda

RUN apt-get -qq update && apt-get -qq -y install curl bzip2 \
    && curl -sSL https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -o /tmp/miniconda.sh \
    && bash /tmp/miniconda.sh -bfp $CONDA_DIR \
    && rm -rf /tmp/miniconda.sh \
    && conda install -y python=3.6 \
    && conda update conda \
    && apt-get -qq -y remove curl bzip2 \
    && apt-get -qq -y autoremove \
    && apt-get autoclean \
    && rm -rf /var/lib/apt/lists/* /var/log/dpkg.log \
    && conda clean --all --yes

#############################################
# TF dependencies per the TF standard Dockerfile

# Pick up some TF dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
        build-essential \
        curl \
        libfreetype6-dev \
        libpng12-dev \
        libzmq3-dev \
        pkg-config \
        python \
        python-dev \
        rsync \
        software-properties-common \
        unzip \
        && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

RUN pip --no-cache-dir install \
        ipykernel \
        jupyter \
        matplotlib \
        numpy \
        pandas \
        scipy \
        sklearn \
        && \
    python -m ipykernel.kernelspec


########################################################
# Install TensorFlow GPU version from their CI repository
#RUN pip --no-cache-dir install \ 
#	http://ci.tensorflow.org/view/Nightly/job/nightly-matrix-linux-gpu/TF_BUILD_IS_OPT=OPT,TF_BUILD_IS_PIP=PIP,TF_BUILD_PYTHON_VERSION=PYTHON3.6,label=gpu-linux/lastSuccessfulBuild/artifact/pip_test/whl/tensorflow_gpu-1.head-cp35-cp35m-manylinux1_x86_64.whl

# Force final 1.4.0 version since anything newer requires CUDA 9.0 (we're at 8.0 as of Spring 2018)
RUN pip install --upgrade https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow_gpu-1.4.0rc1-cp36-cp36m-linux_x86_64.whl

RUN apt-get -qq update && apt-get -qq -y install git

RUN ( echo 'Acquire::http::Timeout "20";'; echo 'Acquire::ftp::Timeout "20";' ) > /etc/apt/apt.conf.d/short-timeout.conf

RUN conda install --yes pytorch==0.3.1 -c pytorch

# RUN conda install --quiet --yes -c conda-forge pygpu nose theano

RUN apt-get -qq update && apt-get -qq -y install \
	git
 
RUN pip install \
 	keras==2.1.5


RUN conda install --yes nltk spacy seaborn
RUN python -m spacy download en
RUN python -m spacy download de

 
# RUN pip install html5lib==1.0b8
# RUN apt-get -qq -y install protobuf-compiler python-pil python-lxml
# RUN conda install networkx

# To support background jobs
RUN apt-get -qq -y install screen tmux
# Fix screen binary permissions for non-setuid execution (so NSS_WRAPPER can funciton)
RUN chmod g-s /usr/bin/screen
RUN chmod 1777 /var/run/screen

# To support incoming SFTP copies
RUN apt-get -qq -y install openssh-sftp-server


# RUN apt-get update && apt-get -y install texlive-xetex
# # Note: metafont doesn't seem to like using NFS homedir as tmp directory, so point it elsewhere
# ENV TEXMFVAR /tmp
# RUN apt-get update && apt-get -y install libgtk2.0-0


RUN apt-get clean


# nbresuse to show users memory usage
# comment to force rebuild
RUN echo 18forceme
RUN pip install git+https://github.com/agt-ucsd/nbresuse.git
RUN jupyter serverextension enable --sys-prefix --py nbresuse
RUN jupyter nbextension install --sys-prefix --py nbresuse
RUN jupyter nbextension enable --sys-prefix --py nbresuse

# clean conda cache last to free up space in the image
RUN conda clean --all --yes

# Install entrypoint
COPY run_jupyter.sh /
RUN chmod 755 run_jupyter.sh

# For CUDA profiling, TensorFlow requires CUPTI.
ENV LD_LIBRARY_PATH /usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH
ENV DEBIAN_FRONTEND teletype

# TensorBoard
EXPOSE 6006
# IPython
EXPOSE 8888

# Fear not, root execution won't be possible within our instructional cluster
CMD ["/run_jupyter.sh", "--allow-root"]

